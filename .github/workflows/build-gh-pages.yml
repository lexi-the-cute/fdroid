# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Github Pages Site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Schedule occasional check
  schedule:
    - cron: "0 */6 * * *"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    if: (!endsWith(github.event.head_commit.message, '--norun'))
    runs-on: ubuntu-latest
    environment: FDroid
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Add FDroidServer Repo
      - name: Add FDroidServer Repo
        run: |
          sudo add-apt-repository ppa:fdroid/fdroidserver

      # Install Dependencies
      - name: Install and Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: fdroidserver
          version: 1.0
          execute_install_scripts: true
        
      # Download Previously Generated Docs
      - name: Download Previously Generated Docs
        continue-on-error: true
        run: |
          wget https://github.com/${{ github.repository }}/releases/latest/download/generated-docs.zip -O ${{ github.workspace }}/downloaded-generated-docs
          unzip ${{ github.workspace }}/downloaded-generated-docs.zip -d ${{ github.workspace }}/docs/fdroid
          rm ${{ github.workspace }}/downloaded-generated-docs.zip

      # Write Secret Key
      - name: Write Secret Key
        run: echo "${{ secrets.REPO_SIGNING_KEY }}" | base64 -d > ${{ github.workspace }}/docs/fdroid/keystore.p12

      # Add Secrets to Config
      - name: Add Secrets to Config
        run: echo -e "\n${{ secrets.SECRET_CONFIG }}" >> ${{ github.workspace }}/docs/fdroid/config.yml

      # Extract/Import GPG Signing Key
      - name: Extract GPG Signing Key
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" > $HOME/signing.gpg
          gpg --import $HOME/signing.gpg

      # Download Android APK
      - name: Download Android APK
        run: |
          mkdir -p ${{ github.workspace }}/docs/fdroid/repo
          wget https://github.com/lexi-the-cute/catgirl-engine/releases/latest/download/CatgirlEngine-Android.zip -O ${{ github.workspace }}/catgirl-engine.zip
          unzip ${{ github.workspace }}/catgirl-engine.zip catgirl-engine.apk -d ${{ github.workspace }}/docs/fdroid/repo

      # Rename Android APK
      - name: Rename Android APK
        run: |
          export VERSION=`apkanalyzer manifest version-name ${{ github.workspace }}/docs/fdroid/repo/catgirl-engine.apk`
          mv ${{ github.workspace }}/docs/fdroid/repo/catgirl-engine.apk ${{ github.workspace }}/docs/fdroid/repo/catgirl-engine-v$VERSION.apk 

      # FDroid Update
      - name: FDroid Update
        run: |
          cd ${{ github.workspace }}/docs/fdroid
          fdroid update

      # Remove Secret Key and Config
      - name: Remove Secret Key and Config
        run: |
          rm ${{ github.workspace }}/docs/fdroid/keystore.p12
          rm ${{ github.workspace }}/docs/fdroid/config.yml

      # Create Docs Zip
      - name: Create Docs Zip
        run: |
          mkdir -p ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/docs/fdroid/archive ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/docs/fdroid/repo ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/docs/fdroid/srclibs ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/docs/fdroid/tmp ${{ github.workspace }}/upload

          cd ${{ github.workspace }}/upload
          zip -9 -y -r ${{ github.workspace }}/generated-docs.zip .

      # Delete Previous Release
      - name: üë©‚Äçüíª Delete Previous Release
        continue-on-error: true
        run: |
          export VERSION="1.0.0"
          gh release delete --cleanup-tag v$VERSION -R ${{ github.repository }} -y

      # Create Tag and Github Release
      - name: üë©‚Äçüíª Create Tag and Github Release
        run: |
          export VERSION="1.0.0"
          export VERSION_STRING="Latest Build"
          export BODY="This release exists purely for the Github Action for publishing pages"

          export DRAFT="false"
          export PRERELEASE="false"
          export LATEST="true"
          export GENERATE_RELEASE_NOTES="true"

          export BRANCH=`git branch --show-current --format="%s" | tr -d '\n'`
          # export COMMIT=`git log -1 --oneline | cut -d' ' -f1 | tr -d '\n'`

          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f tag_name="v$VERSION" \
            -f target_commitish="$BRANCH" \
            -f name="$VERSION_STRING" \
            -f body="$BODY" \
            -f make_latest="$LATEST" \
            -F draft="$DRAFT" \
            -F prerelease="$PRERELEASE" \
            -F generate_release_notes="$GENERATE_RELEASE_NOTES" || echo "Already Exists"

      # Publish to Github Release
      - name: üë©‚Äçüíª Publish to Github Release
        run: |
          export VERSION="1.0.0"
          export ARTIFACT_PATH="${{ github.workspace }}/generated-docs.zip"
          export DISPLAY_LABEL="x86_64 Linux Zip"

          gh release upload v$VERSION "$ARTIFACT_PATH"#"$DISPLAY_LABEL" -R ${{ github.repository }}

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Make Site Directories
      - name: Make Site Directories
        run: |
          mkdir -p ${{ github.workspace }}/docs
          mkdir -p ${{ github.workspace }}/_site

      # Build with Jekyll
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

      # List Environment
      - name: List Environment
        run: env
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Deploy to Github Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
